/* This file is generated by GenerateTests.java. Please do not modify. */
/*
 * Copyright 2017 - 2020 Volker Berlin (i-net software)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.inetsoftware.jwebassembly.jawa;

import de.inetsoftware.jwebassembly.JWebAssembly;
import de.inetsoftware.jwebassembly.jawa.unit.*;
import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

public class RunJawaTests {

    private final static boolean DEBUG = true;
    private final static String OUT_DIR = "build\\code";
    private final static String JAWA_DIR = "java -jar ..\\wizard-engine\\bin\\jawa.jar";

    @Test
    public void add01() { run( add01.class ); }

    @Test
    public void add02() { run( add02.class ); }

    @Test
    public void aiobe00() { run( aiobe00.class ); }

    @Test
    public void aiobe01() { run( aiobe01.class ); }

    @Test
    public void aiobe02() { run( aiobe02.class ); }

    @Test
    public void alloc_loop00() { run( alloc_loop00.class ); }

    @Test
    public void alloc_loop01() { run( alloc_loop01.class ); }

    @Test
    public void andand00() { run( andand00.class ); }

    @Test
    public void andand01() { run( andand01.class ); }

    @Test
    public void andand02() { run( andand02.class ); }

    @Test
    public void andand03() { run( andand03.class ); }

    @Test
    public void andand04() { run( andand04.class ); }

    @Test
    public void args00() { run( args00.class ); }

    @Test
    public void args01() { run( args01.class ); }

    @Test
    public void args02() { run( args02.class ); }

    @Test
    public void args03() { run( args03.class ); }

    @Test
    public void args04() { run( args04.class ); }

    @Test
    public void args05() { run( args05.class ); }

    @Test
    public void args06() { run( args06.class ); }

    @Test
    public void args07() { run( args07.class ); }

    @Test
    public void args08() { run( args08.class ); }

    @Test
    public void args09() { run( args09.class ); }

    @Test
    public void arraylength00() { run( arraylength00.class ); }

    @Test
    public void for00() { run( for00.class ); }

    @Test
    public void for01() { run( for01.class ); }

    @Test
    public void for02() { run( for02.class ); }

    @Test
    public void for03() { run( for03.class ); }

    @Test
    public void instance_field01() { run( instance_field01.class ); }

    @Test
    public void instance_field02() { run( instance_field02.class ); }

    @Test
    public void instance_field03() { run( instance_field03.class ); }

    @Test
    public void instance_field04() { run( instance_field04.class ); }

    @Test
    public void instance_field05() { run( instance_field05.class ); }

    @Test
    public void instance_field06() { run( instance_field06.class ); }

    @Test
    public void instance_field07() { run( instance_field07.class ); }

    @Test
    public void instance_meth00() { run( instance_meth00.class ); }

    @Test
    public void instance_meth01() { run( instance_meth01.class ); }

    @Test
    public void instance_meth02() { run( instance_meth02.class ); }

    @Test
    public void null00() { run( null00.class ); }

    @Test
    public void null01() { run( null01.class ); }

    @Test
    public void null02() { run( null02.class ); }

    @Test
    public void syscall01() { run( syscall01.class ); }

    @Test
    public void virtual00() { run( virtual00.class ); }

    @Test
    public void virtual01() { run( virtual01.class ); }

    @Test
    public void virtual02() { run( virtual02.class ); }

    @Test
    public void virtual03() { run( virtual03.class ); }

    @Test
    public void virtual04() { run( virtual04.class ); }

    @Test
    public void virtual05() { run( virtual05.class ); }

    @Test
    public void virtual06() { run( virtual06.class ); }

    @Test
    public void virtual07() { run( virtual07.class ); }

    @Test
    public void virtual08() { run( virtual08.class ); }

    @Test
    public void virtual09() { run( virtual09.class ); }

    @Test
    public void virtual10() { run( virtual10.class ); }


    public void run(Class<?> clazz) {
        // Setup compiler
        JWebAssembly compiler = new JWebAssembly();
        URL url = clazz.getResource( '/' + clazz.getName().replace( '.', '/' ) + ".class" );
        compiler.addFile(url);
        final String[] libraries = System.getProperty("java.class.path").split(File.pathSeparator);
        for( String lib : libraries ) {
            if( lib.endsWith( ".jar" ) || lib.toLowerCase().contains( "jwebassembly-api" ) ) {
                compiler.addLibrary( new File(lib) );
            }
        }

        // Output WAT / WASM
        if (DEBUG) {
            File text = new File(OUT_DIR, clazz.getSimpleName() + ".wat");
            compiler.compileToText(text);
        }
        File binary = new File(OUT_DIR, clazz.getSimpleName() + ".wasm");
        compiler.compileToBinary(binary);

        // Get all unit tests to run
        if (clazz.getAnnotation(RunTests.class) != null) {
            for (RunTest test : clazz.getAnnotation(RunTests.class).value()) {
                RunTestCase(test, binary);
            }
        } else {
            RunTest test = clazz.getAnnotation(RunTest.class);
            if (test == null) Assert.fail("No test cases defined for class");
            RunTestCase(test, binary);
        }
    }

    void RunTestCase(RunTest test, File binary) {
        try {
            Process proc = Runtime.getRuntime().exec(JAWA_DIR + " " + binary.getCanonicalPath() + " " + test.input());
            proc.waitFor();
            InputStream in = proc.getInputStream();
            byte b[] = new byte[in.available()];
            in.read(b, 0, b.length);
            String output = new String(b);
            Assert.assertEquals("Ran input \"" + test.input() + "\"", test.output(), output);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

}
